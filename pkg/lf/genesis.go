/*
 * LF: Global Fully Replicated Key/Value Store
 * Copyright (C) 2018-2019  ZeroTier, Inc.  https://www.zerotier.com/
 *
 * Licensed under the terms of the MIT license (see LICENSE.txt).
 */

package lf

import (
	"encoding/json"
	"strings"
)

// GenesisParameters is the payload (JSON encoded) of the first RecordMinLinks records in a global data store.
type GenesisParameters struct {
	initialized bool

	Name                       string   `json:",omitempty"` // Name of this LF network / data store
	Contact                    string   `json:",omitempty"` // Contact info for this network (may be empty)
	Comment                    string   `json:",omitempty"` // Optional comment
	RootCertificateAuthorities []Blob   `json:",omitempty"` // X.509 certificates for master CAs for this data store (empty for an unbiased work-only data store)
	CertificateRequired        bool     `json:""`           // Is a certificate required? (must be false if there are no CAs, obviously)
	WorkRequired               bool     `json:""`           // Is proof of work required?
	LinkKey                    [32]byte `json:""`           // Static 32-byte key used to ensure that nodes in this network only connect to one another
	TimestampFloor             uint64   `json:""`           // Floor for network record timestamps (seconds)
	RecordMinLinks             uint     `json:""`           // Minimum number of links required for non-genesis records
	RecordMaxValueSize         uint     `json:""`           // Maximum size of record values
	RecordMaxSize              uint     `json:""`           // Maximum size of records (up to the RecordMaxSize constant)
	RecordMaxForwardTimeDrift  uint     `json:""`           // Maximum number of seconds in the future a record can be timestamped
	AmendableFields            []string `json:",omitempty"` // List of json field names that the genesis owner can change by posting non-empty records
}

// Update updates these GenesisParameters from a JSON encoded parameter set.
// This handles the initial update and then constraining later updated by AmendableFields and which fields are present.
func (gp *GenesisParameters) Update(jsonValue []byte) error {
	if len(jsonValue) == 0 {
		return nil
	}

	updFields := make(map[string]*json.RawMessage)
	err := json.Unmarshal(jsonValue, &updFields)
	if err != nil {
		return err
	}
	var ngp GenesisParameters
	err = json.Unmarshal(jsonValue, &ngp)
	if err != nil {
		return err
	}

	afields := gp.AmendableFields
	for k := range updFields {
		skip := gp.initialized
		if skip {
			for _, af := range afields {
				if strings.EqualFold(af, k) {
					skip = false
					break
				}
			}
		}
		if !skip {
			switch strings.ToLower(k) {
			case "name":
				gp.Name = ngp.Name
			case "contact":
				gp.Contact = ngp.Contact
			case "comment":
				gp.Comment = ngp.Comment
			case "rootcertificateauthorities":
				gp.RootCertificateAuthorities = ngp.RootCertificateAuthorities
			case "certificaterequired":
				gp.CertificateRequired = ngp.CertificateRequired
			case "workrequired":
				gp.WorkRequired = ngp.WorkRequired
			case "linkkey":
				gp.LinkKey = ngp.LinkKey
			case "timestampfloor":
				gp.TimestampFloor = ngp.TimestampFloor
			case "recordminlinks":
				gp.RecordMinLinks = ngp.RecordMinLinks
			case "recordmaxvaluesize":
				gp.RecordMaxValueSize = ngp.RecordMaxValueSize
			case "recordmaxsize":
				gp.RecordMaxSize = ngp.RecordMaxSize
			case "recordmaxforwardtimedrift":
				gp.RecordMaxForwardTimeDrift = ngp.RecordMaxForwardTimeDrift
			case "amendablefields":
				gp.AmendableFields = ngp.AmendableFields
			}
		}
	}
	gp.initialized = true

	return nil
}

// CreateGenesisRecords creates a set of genesis records for a new LF data store.
// The number created is always sufficient to satisfy RecordMinLinks for subsequent records.
// If RecordMinLinks is zero one record is created. The first genesis record will contain
// the Genesis parameters in JSON format while subsequent records are empty.
func CreateGenesisRecords(genesisOwnerType int, genesisParameters *GenesisParameters) ([]*Record, *Owner, error) {
	gpjson, err := json.Marshal(genesisParameters)
	if err != nil {
		return nil, nil, err
	}

	var records []*Record
	var links [][32]byte
	genesisOwner, err := NewOwner(genesisOwnerType)
	if err != nil {
		return nil, nil, err
	}
	now := TimeSec()

	var wg *Wharrgarblr
	if genesisParameters.WorkRequired {
		wg = NewWharrgarblr(RecordDefaultWharrgarblMemory, 0)
	}

	// Create the very first genesis record, which contains the genesis configuration structure in JSON format.
	r, err := NewRecord(gpjson, nil, nil, nil, nil, nil, now, wg, 0, genesisOwner)
	if err != nil {
		return nil, nil, err
	}
	records = append(records, r)
	links = append(links, *r.Hash())

	// Subsequent genesis records are empty and just exist so real records can satisfy their minimum link requirement.
	for i := uint(1); i < genesisParameters.RecordMinLinks; i++ {
		r, err := NewRecord(nil, links, nil, nil, nil, nil, now+uint64(i), wg, 0, genesisOwner)
		if err != nil {
			return nil, nil, err
		}
		records = append(records, r)
		links = append(links, *r.Hash())
	}

	return records, genesisOwner, nil
}

//////////////////////////////////////////////////////////////////////////////

/*
{
  "Name": "Sol",
  "Comment": "Global Public LF Data Store",
  "CertificateRequired": false,
  "WorkRequired": true,
  "LinkKey": [246, 24, 127, 183, 115, 106, 148, 49, 73, 13, 60, 14, 159, 97, 237, 189, 28, 159, 162, 94, 123, 175, 189, 177, 55, 145, 59, 132, 249, 94, 118, 27],
  "TimestampFloor": 1556136702,
  "RecordMinLinks": 3,
  "RecordMaxValueSize": 1024,
  "RecordMaxSize": 65536,
  "RecordMaxForwardTimeDrift": 15
}
*/

// SolGenesisRecords are the genesis records for the "Sol" LF network, the global shared LF instance.
// Sol is for Earth and its neighbors in the Sol system and should in theory be useful up to
// Kardashev type II civilization scale.
var SolGenesisRecords = []byte{0x0, 0x0, 0xa0, 0x2, 0x1, 0x42, 0xca, 0x7b, 0x44, 0x38, 0x9, 0xd3, 0xa6, 0x8c, 0x8, 0x1d, 0x22, 0xa6, 0xbc, 0x61, 0x23, 0x82, 0x85, 0x88, 0x21, 0x6f, 0xda, 0x18, 0x74, 0x43, 0x7, 0xa1, 0x88, 0x23, 0x6c, 0xde, 0x88, 0x9, 0xc3, 0x6, 0x4, 0x94, 0x3a, 0x62, 0xd8, 0xa4, 0x19, 0x3, 0x82, 0x89, 0x11, 0x10, 0x44, 0xc2, 0xd0, 0x9, 0x3, 0x62, 0xa, 0x9d, 0x37, 0x72, 0xe, 0x3e, 0x1c, 0x52, 0x46, 0xe, 0x9d, 0x34, 0x66, 0x48, 0xae, 0x2c, 0x23, 0xa5, 0x4c, 0x9c, 0x3a, 0x69, 0x64, 0x92, 0x41, 0x68, 0xa6, 0xe3, 0x9c, 0x32, 0xf, 0xaf, 0xc4, 0x5c, 0xe3, 0x13, 0xa8, 0xd0, 0x32, 0x44, 0x75, 0xd0, 0x91, 0x53, 0x27, 0xa9, 0x8, 0x26, 0x69, 0xdc, 0xac, 0x59, 0x52, 0x26, 0xf, 0xc2, 0x2d, 0x32, 0x68, 0xd8, 0x60, 0x21, 0x96, 0x45, 0xc, 0x19, 0x37, 0xce, 0xe2, 0x98, 0x71, 0x36, 0x46, 0x8d, 0xb3, 0x30, 0xc8, 0xc6, 0xa0, 0x81, 0x83, 0x5, 0x8d, 0x1c, 0x2c, 0x6e, 0xb4, 0x8d, 0xd1, 0xd6, 0x6, 0x8c, 0xb3, 0x34, 0xce, 0xd6, 0xc8, 0x9b, 0x43, 0xad, 0x8c, 0x19, 0x6a, 0x63, 0xe0, 0xc8, 0x2b, 0xc3, 0xee, 0xdb, 0xbc, 0x31, 0x6c, 0xc8, 0x60, 0x91, 0x43, 0x30, 0x5a, 0xbe, 0x37, 0xe0, 0x2e, 0x8e, 0x7c, 0x43, 0x6d, 0x8d, 0xcd, 0x34, 0xe0, 0x12, 0x3e, 0x3b, 0x83, 0xb2, 0xd8, 0xc2, 0x97, 0x17, 0x97, 0xbd, 0xd1, 0xe5, 0x21, 0x95, 0x34, 0x6, 0xe7, 0xb0, 0x6c, 0x3, 0xc7, 0x88, 0xc6, 0x98, 0x8, 0xdf, 0xd6, 0xb0, 0xd1, 0xd7, 0xc6, 0xd, 0x18, 0x94, 0x45, 0xf8, 0x1c, 0x13, 0x93, 0x4c, 0x13, 0xad, 0x59, 0xb7, 0xce, 0x41, 0xd8, 0x76, 0x78, 0x99, 0xe2, 0x72, 0x8e, 0x87, 0xc1, 0x63, 0xa5, 0xa3, 0xd5, 0x29, 0x69, 0xf4, 0x1c, 0xd4, 0x11, 0x23, 0xb8, 0xe0, 0xe7, 0xd1, 0xa7, 0xe3, 0xc9, 0xbe, 0x1d, 0xa1, 0xd, 0xd0, 0x33, 0xc8, 0x86, 0x37, 0xde, 0x84, 0xba, 0x91, 0x98, 0x77, 0xc2, 0x48, 0x87, 0x6d, 0x90, 0x88, 0x9c, 0x9c, 0x16, 0xbb, 0xd7, 0xe8, 0x13, 0x10, 0x31, 0xb, 0xec, 0x8f, 0x57, 0x6f, 0x1b, 0xed, 0x14, 0xf5, 0x89, 0x76, 0x35, 0x8a, 0xb, 0xf3, 0x70, 0xf4, 0x95, 0x6d, 0x97, 0xa8, 0x2c, 0x4e, 0x13, 0x60, 0xe4, 0xed, 0x69, 0x94, 0x60, 0x75, 0xcf, 0x4, 0xf6, 0x35, 0x1f, 0xb0, 0xa, 0xa0, 0x73, 0x8d, 0xa6, 0xb, 0x8b, 0x96, 0xc8, 0x8b, 0xe8, 0x7b, 0x0, 0xfe, 0x85, 0x83, 0xe6, 0x5, 0x0, 0x1, 0xbb, 0x7b, 0x50, 0xe9, 0x90, 0xc7, 0x66, 0x97, 0xcc, 0x99, 0x0, 0x1, 0x65, 0xd8, 0x60, 0x6c, 0x42, 0xdc, 0x71, 0xa2, 0xd4, 0x61, 0x87, 0xd5, 0x51, 0x30, 0x9a, 0x7e, 0xb6, 0x51, 0x4, 0xdd, 0x9c, 0x86, 0x68, 0x37, 0xc5, 0xf0, 0xfd, 0x28, 0x6f, 0x48, 0xed, 0x1, 0x2d, 0x88, 0x5b, 0x46, 0x37, 0x58, 0x66, 0x1d, 0xc9, 0x5a, 0x81, 0xcc, 0x55, 0xa1, 0x71, 0xba, 0x13, 0x14, 0x43, 0x39, 0xd5, 0x3, 0xd0, 0xe5, 0x56, 0x6c, 0xbc, 0xe8, 0x86, 0xde, 0xc4, 0x21, 0x5f, 0x28, 0x11, 0x81, 0x9e, 0xc1, 0xb9, 0xb2, 0xe6, 0x21, 0x91, 0x81, 0xa8, 0x46, 0xdc, 0xd0, 0x82, 0xa5, 0x55, 0x1f, 0x1c, 0x1a, 0xb5, 0x6e, 0x69, 0xd6, 0xd3, 0x3c, 0xe8, 0x54, 0xea, 0x96, 0x75, 0x26, 0x3d, 0x0, 0x0, 0x0, 0x31, 0xb, 0xec, 0x8f, 0x57, 0x6f, 0x1b, 0xed, 0x14, 0xf5, 0x89, 0x76, 0x35, 0x8a, 0xb, 0xf3, 0x70, 0xf4, 0x95, 0x6d, 0x97, 0xa8, 0x2c, 0x4e, 0x13, 0x60, 0xe4, 0xed, 0x69, 0x94, 0x60, 0x75, 0xcf, 0x4, 0xf6, 0x35, 0x1f, 0xb0, 0xa, 0xa0, 0x73, 0x8d, 0xa6, 0xb, 0x8b, 0x96, 0xc8, 0x8b, 0xe8, 0x7b, 0x1, 0x6f, 0x7d, 0x68, 0xcb, 0x95, 0xa2, 0xe0, 0xc8, 0xf5, 0xc4, 0x7f, 0xf1, 0x58, 0xc, 0xec, 0x11, 0x9c, 0x58, 0x74, 0x28, 0x7f, 0xb7, 0x7b, 0x78, 0x98, 0xf5, 0xb0, 0x10, 0x51, 0x44, 0x94, 0x3f, 0xff, 0x85, 0x83, 0xe6, 0x5, 0x0, 0x1, 0xa2, 0xba, 0x5b, 0xf8, 0x57, 0xaf, 0x95, 0xed, 0x1a, 0x20, 0x0, 0x0, 0x2a, 0x30, 0x60, 0x6a, 0x29, 0x97, 0xc2, 0x60, 0xc8, 0x94, 0xdd, 0xa6, 0x75, 0x16, 0xfc, 0x33, 0xd7, 0xee, 0x42, 0x3b, 0x1c, 0x17, 0xfb, 0x0, 0x64, 0x2e, 0x9d, 0x48, 0xf5, 0xa0, 0x50, 0x98, 0x42, 0xf1, 0xcc, 0x1d, 0xd9, 0x9d, 0xfe, 0xb5, 0xbc, 0xb3, 0x65, 0x4e, 0x57, 0x81, 0xf7, 0x13, 0x71, 0xac, 0x85, 0x2c, 0x27, 0x7d, 0x25, 0x1b, 0xcb, 0x27, 0xd5, 0xb4, 0xe9, 0x5e, 0x43, 0x5f, 0xf, 0x3, 0x5d, 0x2a, 0xe8, 0x7f, 0xbe, 0x39, 0x7b, 0x3d, 0x84, 0x82, 0x6, 0x4c, 0x8a, 0x41, 0xbf, 0x3, 0xd8, 0x3b, 0xaa, 0xf7, 0x29, 0xb7, 0x56, 0xb1, 0x36, 0xf8, 0xdf, 0x30, 0x2d, 0x46, 0xb9, 0xc3, 0xe8, 0x0, 0x0, 0x0, 0x31, 0xb, 0xec, 0x8f, 0x57, 0x6f, 0x1b, 0xed, 0x14, 0xf5, 0x89, 0x76, 0x35, 0x8a, 0xb, 0xf3, 0x70, 0xf4, 0x95, 0x6d, 0x97, 0xa8, 0x2c, 0x4e, 0x13, 0x60, 0xe4, 0xed, 0x69, 0x94, 0x60, 0x75, 0xcf, 0x4, 0xf6, 0x35, 0x1f, 0xb0, 0xa, 0xa0, 0x73, 0x8d, 0xa6, 0xb, 0x8b, 0x96, 0xc8, 0x8b, 0xe8, 0x7b, 0x2, 0x6f, 0x7d, 0x68, 0xcb, 0x95, 0xa2, 0xe0, 0xc8, 0xf5, 0xc4, 0x7f, 0xf1, 0x58, 0xc, 0xec, 0x11, 0x9c, 0x58, 0x74, 0x28, 0x7f, 0xb7, 0x7b, 0x78, 0x98, 0xf5, 0xb0, 0x10, 0x51, 0x44, 0x94, 0x3f, 0x8e, 0x53, 0x27, 0xc4, 0x90, 0xe1, 0x55, 0x88, 0xb3, 0xb6, 0x4f, 0x1a, 0x14, 0xe, 0x69, 0xc9, 0xf4, 0xa8, 0x8e, 0x9d, 0xa2, 0x0, 0x3e, 0x84, 0x74, 0x2f, 0x1d, 0xfa, 0xfe, 0x19, 0x81, 0x39, 0x80, 0x86, 0x83, 0xe6, 0x5, 0x0, 0x1, 0xda, 0xbb, 0x1d, 0x8f, 0xea, 0x2b, 0x57, 0xd9, 0x1b, 0xd6, 0x0, 0x0, 0x46, 0xe, 0x60, 0x55, 0xb7, 0x4e, 0x1a, 0xbd, 0x23, 0x51, 0x3, 0xee, 0xf, 0xd5, 0x77, 0xcb, 0x25, 0xbd, 0x5a, 0xd0, 0x64, 0xf5, 0x31, 0xc9, 0x7d, 0x77, 0xbc, 0x64, 0xc2, 0x8d, 0x1b, 0xd7, 0x1a, 0x6d, 0xe0, 0x3d, 0x8f, 0x33, 0xdb, 0x56, 0x60, 0x7d, 0xd, 0x63, 0xbf, 0x81, 0x3e, 0x4e, 0xb, 0x95, 0xcc, 0xb1, 0x89, 0x40, 0x93, 0x6a, 0x35, 0x80, 0x85, 0x54, 0xd4, 0x1e, 0xd9, 0x90, 0x7f, 0x94, 0x3, 0x66, 0xed, 0x98, 0xa6, 0xb7, 0x42, 0x6, 0x1d, 0xa2, 0x39, 0xd2, 0x92, 0xdb, 0x34, 0xb, 0x3e, 0xbb, 0xdc, 0x61, 0x71, 0xaa, 0xe7, 0xfc, 0x8c, 0x2d, 0xb8, 0x22, 0xfb, 0x90, 0x3, 0x5d, 0x52}
